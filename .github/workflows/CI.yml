name: CI

# Trigger workflow on push to the main branch
on:
  push:
    branches:
      - main

permissions:
  contents: write

env:
  DOCKER_USERNAME: donepuchie                     # DockerHub username
  REPO: donepuchie/auto-version-ci               # DockerHub repository name (user/repo)

jobs:
  docker:
    runs-on: ubuntu-latest                        # Use the latest Ubuntu runner
    timeout-minutes: 15                           # Fail the job if it exceeds 15 minutes

    steps:
      # Checkout source code with full commit history (required for semantic versioning)
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Generate a semantic version tag based on commit messages and conventional commits
      - name: Calculate semantic version
        id: versioning
        uses: PaulHatch/semantic-version@v4.0.2
        with:
          branch: main
          tag_prefix: "v"
          major_pattern: "BREAKING CHANGE:"
          minor_pattern: "feat:"
          format: "v${major}.${minor}.${patch}-prerelease${increment}"

      # Authenticate with DockerHub using a Personal Access Token (PAT) stored in GitHub secrets
      - name: Authenticate to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build the Docker image and push it to DockerHub with both "latest" and version-specific tags
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: >-
            ${{ env.REPO }}:latest,
            ${{ env.REPO }}:${{ steps.versioning.outputs.version }}

      # Create a new GitHub prerelease tagged with the generated semantic version
      - name: Create GitHub Release
        if: ${{ !startsWith(github.ref, 'refs/tags/') }} # Skip if this is already a tag push
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.versioning.outputs.version }}
          release_name: ${{ steps.versioning.outputs.version }}
          prerelease: true

